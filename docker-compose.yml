version: "3.7"
services:
  zookeeper:
    restart: always
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    restart: always
    image: docker.io/bitnami/kafka:3.3
    ports:
      - "9093:9093"
    volumes:
      - "kafka-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper

  vectordb:
    # image: ghcr.io/chroma-core/chroma:0.5.2  # Image tag: https://github.com/chroma-core/chroma/releases
    # image: ghcr.io/chroma-core/chroma:0.5.3
    build: ./
    container_name: chroma_docker
    ports:
      - 8800:8000
    env_file:
      - ./.env
    volumes:
      - ./chroma_configs/my_db:/chroma/my_db
      #- ./my_config:/chroma/my_config

  elasticsearch:
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - "elasticsearch-volume:/usr/share/elasticsearch/data"

  kibana:
    restart: always
    image: docker.elastic.co/kibana/kibana:8.9.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  # namenode:
  #   image: bde2020/hadoop-namenode:2.0.0-hadoop2.7.4-java8
  #   container_name: namenode
  #   volumes:
  #     - hadoop_namenode:/hadoop/dfs/name
  #     - ./temp:/tmp/temp
  #   environment:
  #     - CLUSTER_NAME=test
  #   env_file:
  #     - ./hadoop.env
  #   ports:
  #     - 50070:50070

  # datanode:
  #   image: bde2020/hadoop-datanode:2.0.0-hadoop2.7.4-java8
  #   container_name: datanode
  #   volumes:
  #     - hadoop_datanode:/hadoop/dfs/data
  #   environment:
  #     SERVICE_PRECONDITION: "namenode:50070"
  #   env_file:
  #     - ./hadoop.env
  #   ports:
  #     - 50075:50075

  # datanode2:
  #   image: bde2020/hadoop-datanode:2.0.0-hadoop2.7.4-java8
  #   container_name: datanode2
  #   volumes:
  #     - hadoop_datanode2:/hadoop/dfs/data
  #   environment:
  #     SERVICE_PRECONDITION: "namenode:50070"
  #   env_file:
  #     - ./hadoop.env
  #   ports:
  #     - 50076:50075

  # datanode3:
  #   image: bde2020/hadoop-datanode:2.0.0-hadoop2.7.4-java8
  #   container_name: datanode3
  #   volumes:
  #     - hadoop_datanode3:/hadoop/dfs/data
  #   environment:
  #     SERVICE_PRECONDITION: "namenode:50070"
  #   env_file:
  #     - ./hadoop.env
  #   ports:
  #     - 50077:50075

  # resourcemanager:
  #   image: bde2020/hadoop-resourcemanager:2.0.0-hadoop2.7.4-java8
  #   container_name: resourcemanager
  #   environment:
  #     SERVICE_PRECONDITION: "namenode:50070 datanode:50075"
  #   env_file:
  #     - ./hadoop.env
  #   ports:
  #     - 8088:8088

  # nodemanager1:
  #   image: bde2020/hadoop-nodemanager:2.0.0-hadoop2.7.4-java8
  #   container_name: nodemanager
  #   environment:
  #     SERVICE_PRECONDITION: "namenode:50070 datanode:50075 resourcemanager:8088"
  #   env_file:
  #     - ./hadoop.env

  # historyserver:
  #   image: bde2020/hadoop-historyserver:2.0.0-hadoop2.7.4-java8
  #   container_name: historyserver
  #   volumes:
  #     - hadoop_historyserver:/hadoop/yarn/timeline
  #   environment:
  #     SERVICE_PRECONDITION: "namenode:50070 datanode:50075 resourcemanager:8088"
  #   env_file:
  #     - ./hadoop.env

volumes:
  kafka-volume:
  zookeeper-volume:
  chromadb-volume:
  elasticsearch-volume:
  # hadoop_namenode:
  # hadoop_datanode:
  # hadoop_datanode2:
  # hadoop_datanode3:
  # hadoop_historyserver: